from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait as wait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.proxy import Proxy, ProxyType
import time
import pyperclip
import requests
import bs4


proxyDict = { 
              "http"  : '', 
              "https" : '',  
              "ftp"   : ''
            }

browser = None

def fun_get_proxy_list():
    proxy_list = []
    res = requests.get('https://free-proxy-list.net/')
    elems = bs4.BeautifulSoup(res.text,'html.parser').select('tbody > tr')
    for i in range(300):
        tmp = elems[i].select('td')
        proxy_list.append(((str(tmp[0])+':'+str(tmp[1])).replace('<td>','')).replace('</td>',''))
    return proxy_list


image = 'https://www.instagram.com/p/B2RX08jIFCi/'
login_url = "https://www.instagram.com/accounts/login/?source=auth_switcher"


def fun_browser(PROXY):
    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_argument('--proxy-server=http://%s' % PROXY)
    browser = webdriver.Chrome(options=chrome_options)
    return browser


def fun_check_browser(browser):
    try:
        browser.get("https://www.instagram.com/accounts/login/?source=auth_switcher")
        element = wait(browser, 5).until(EC.element_to_be_clickable((By.TAG_NAME, 'input')))
        print('Welcome to instagram')
        return False
    except:
        print('Prox not working for instagram: ')
        browser.quit()
        return True


def fun_browser_login(proxy_list,proxy_numb):
    condition = True
    global browser
    while condition:
        if proxy_numb<=len(proxy_list):
            browser = fun_browser(proxy_list[proxy_numb])
            condition = fun_check_browser(browser)
        else:
            proxy_list = fun_get_proxy_list()
            proxy_numb = 0
    return browser, proxy_numb, proxy_list



def fun_loginas(browser,row):
    print('Bandys pasiekti: ',row[2],' ',row[3])
    if browser.current_url!=login_url:
        browser.get(login_url)
        print('Login page kraunasi per naujo')
    try:
        element = wait(browser, 20).until(EC.visibility_of_element_located((By.TAG_NAME, 'input')))
        print('Main login page loaded..')
    except:
        ('Main page not loaded... ', row[0], ' will be skipped')
        return False
    inputs = browser.find_elements_by_tag_name('input')
    for i in inputs:
        fun_clean_input(i)
    inputs[0].send_keys(row[0])
    inputs[1].send_keys(row[1])
    login_condition = True
    while login_condition:
        inputs = browser.find_elements_by_tag_name('button')
        for i in range(len(inputs)):
            if inputs[i].text=="Log In":
                inputs[i].click()
                while login_condition:
                    try:
                        wait(browser, 30).until(EC.url_to_be('https://www.instagram.com/'))
                        print('Acc ',' prisijunge')                
                        login_condition = False
                    except:
                        try:
                            el = browser.find_element_by_id("slfErrorAlert")
                            if '''you're connected to the internet''' in el.text:
                                print('Blogas proxy, bandysim su kitu')
                                return 'proxy'
                        except:
                            tmp = input('Failed to login just enter correct credentials and Login. Write y here and hit enter when done: ')
                break
    return True

       

def fun_do_work(browser,row):
    print('Bandoma pasiekti: ',row[2],' ',row[3])
    if browser.current_url!=row[3]:
        browser.get(row[3])
        try:
            wait(browser, 10).until(EC.url_to_be(row[3]))
        except:
            print('Nesulaukta URL')
    if 'f' in str(row[2]).lower() or 'sekti' in str(row[2]).lower():
        bt = browser.find_elements_by_tag_name('button')
        for i in range(len(bt)):
            if bt[i].text=='Follow':
                bt[i].click()
                break
        print('Now following')
    if 'li' in str(row[2]).lower() or 'la' in str(row[2]).lower():
        span = browser.find_elements_by_tag_name('span')
        for i in range(len(span)):
            if span[i].get_attribute('aria-label') == 'Like':
                span[i].click()
                time.sleep(1)
                break
        print('Liked')
    



def fun_logout(user):
    try:
        tp = user.split('@')
        link = 'https://www.instagram.com/'+str(tp[0])
        print(tp[0])
        print(link)
        browser.get(link)
        el = wait(browser, 15).until(EC.url_matches('https://www.instagram.com/heroofatea'))
        el = wait(browser, 15).until(EC.element_to_be_clickable())
        el = browser.find_elements_by_tag_name('span')
        for i in range(len(spanai)):
            if spanai[i].get_attribute('aria-label')=='Options':
                spanai[i].click()
    except:
        print('GG')


def fun_logout(user):
    tp = user.split('@')
    link = 'https://www.instagram.com/'+str(tp[0])
    print(tp[0])
    print(link)
    browser.get(link)
    el = wait(browser, 15).until(EC.url_matches('https://www.instagram.com/heroofatea'))
    el = browser.find_elements_by_tag_name('span')
    for i in range(len(el)):
        if el[i].get_attribute('aria-label')=='Options':
            el[i].click()
    time.sleep(1)
    el = browser.find_elements_by_tag_name('button')
    for i in range(len(el)):
        if el[i].text=='Log Out':
            el[i].click()
    time.sleep(1)
    print('Loged out ', user)


def fun_read_data():
    condition = True
    print('Bot is on.....')
    while condition:
        chat = input('Select accounts and jobs from Excel and hit Enter')
        if '\r\n' in pyperclip.paste():
             rows = pyperclip.paste().split('\r\n')[:-1]
             for i in range(len(rows)):
                 rows[i]=rows[i].split('\t')
             condition=False
    print('Done')
    return rows


def fun_clean_input(element):
    element.click()
    element.send_keys(Keys.END)
    element.send_keys(Keys.CONTROL, 'a')
    element.send_keys(Keys.DELETE)


def main_worker(proxy_list):
    global browser
    previous_acc = 'old'
    proxy_numb = 0
    rows=fun_read_data()
    rows_hostory = []
    print('Working with ',len(rows),' Instagram acc total')
    print('**********************************')
    for row in rows:
        if (len(row[0])>4) and ('@' in row[0]) and ('.' in row[0]):
            print('User: ',row[0])
            if previous_acc!=row[0]:
                try:
                    if previous_acc!='old':
                        fun_logout(previous_acc)
                    browser.quit()
                except:
                    print('Opening new browser')
                prox_condition = True
                while prox_condition:
                    #browser, proxy_numb, proxy_list = fun_browser_login(proxy_list,proxy_numb)
                    browser = webdriver.Chrome()
                    proxy_numb = proxy_numb+1
                    if fun_loginas(browser,row) == True:
                        prox_condition = False
            else:
                print('Working with same browser as previous')
            fun_do_work(browser,row)
            print('Work done: ', row)
            print('**********************************')
            previous_acc=row[0]
        else:
            print('Invalid user',row)
    print('All jobs done')
    #browser.quit()


proxy_list=fun_get_proxy_list()
if len(proxy_list)>10:
    main_worker(proxy_list)
else:
    print('Check internet and try again')
